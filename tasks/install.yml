---

- name: ({{ os_with_version }}) Install 'which' command if not installed on RedHat based OS
  package:
   name: which
   state: present
  when:
   - ansible_os_family == "RedHat"

- name: ({{ os_with_version }}) Install GIT From Source Tasks Block
  block:

   - name: ({{ os_with_version }}) Enable EPEL Releases
     yum:
      name: epel-release
      state: present
     when:
      - ansible_os_family == "RedHat"

   - name: ({{ os_with_version }}) Update Packages
     apt:
      update_cache: true
     when:
      - ansible_os_family == "Debian"
     changed_when: false
     failed_when: false
     check_mode: false

   - name: ({{ os_with_version }}) Ensure require dependencies are installed ({{ git_required_packages }})
     package:
      name: "{{ item }}"
      state: present
     with_items: "{{ git_required_packages }}"

   - name: ({{ os_with_version }}) Create simlink for docbook2x-texi on RedHat based OS
     file:
      src: "/usr/bin/db2x_docbook2texi"
      dest: "/usr/bin/docbook2x-texi"
      state: link
     when:
      - ansible_os_family == "RedHat"
      - git_install_doc|bool

   - name: ({{ os_with_version }}) Create GIT Expand directory ({{ git_tmp_expand_dir }})
     file:
      path: "{{ git_tmp_expand_dir }}"
      state: directory

   - name: ({{ os_with_version }}) Uncompress Git archives to {{ git_tmp_expand_dir }}
     unarchive:
      src: "{{ git_downloaded_file }}"
      dest: "{{ git_tmp_expand_dir }}"
      creates: "{{ git_tmp_expand_dir }}/README"
      remote_src: true
      extra_opts:
       - --strip-components=1

   - name: ({{ os_with_version }}) Ensure that installed dir exists ({{ git_install_dir }})
     file:
      path: "{{ git_install_dir }}"
      state: directory

   - name: ({{ os_with_version }}) Build prefixed Git to ({{ git_install_dir }}) - ({{ git_build_prefixed_packages }})
     make:
      chdir: "{{ git_tmp_expand_dir }}"
      target: "{{ item }}"
      params:
       prefix: "{{ git_install_dir }}"
     with_items: "{{ git_build_prefixed_packages }}"
     changed_when: false
     failed_when: false
     check_mode: false
     register: make_all

   - name: ({{ os_with_version }}) Build Git to others packages - ({{ git_build_packages }})
     make:
      target: "{{ item }}"
      chdir: "{{ git_tmp_expand_dir }}"
      params:
       prefix: "{{ git_install_dir }}"
     with_items: "{{ git_build_packages }}"
     changed_when: false
     failed_when: false
     check_mode: false
     register: make_install

   - name: Check current GIT version.
     command: >
       git --version
       warn=no
     changed_when: false
     failed_when: false
     check_mode: false
     register: git_installed_source_version

   - name: Display Installed version
     debug:
      var: git_installed_source_version

  when:
   - from_source|bool
   - git_process_install|bool

- name: ({{ os_with_version }}) Install GIT From Repository Tasks Block
  block:

   - name: ({{ RedHat }}) Install GIT with additional packages ({{ git_packages }})
     yum:
      name: "{{ git_packages }}"
      state: present
      enablerepo: "{{ git_additionnal_repos }}"
     when:
      - ansible_os_family == "RedHat"
     register: git_install_redhat

   - name: ({{ os_with_version }}) Update APT Cache
     apt:
      update_cache: true
      cache_valid_time: 86400
     when:
      - ansible_os_family == "Debian"

   - name: ({{ Debian }}) Install GIT with additional packages ({{ git_packages }})
     apt:
      name: "{{ git_packages }}"
      state: present
     when:
      - ansible_os_family == "Debian"
     register: git_install_centos

  when:
   - not from_source|bool
